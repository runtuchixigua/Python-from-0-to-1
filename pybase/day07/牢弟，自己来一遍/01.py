'''
案例1：编写一个Python程序，用于实现打招呼
案例2：把项目中重复性代码封装起来，封装在一个greet()函数中 => 减少冗余，实现代码重用
案例3：现在函数功能较为单一，希望增加函数的功能，可以实现向不同的老师打不同的招呼 => 引用参数，随着传递参数的不同，返回不同的执行结果
案例4：函数一般强调高内聚，低耦合，函数本身尽量不要直接打印输出结果，而是应该把执行权限交回函数的调用位置 => 引入返回值的概念
说明：当函数执行完毕后，系统会自动将函数的返回值返回给函数的调用位置
'''


def greet(name):
    # print(f'{name} say Hello Python')
    return f'{name} say Hello Python'


print(greet('wang'))
